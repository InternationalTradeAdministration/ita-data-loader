trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: BuildArtifacts
  jobs:
  - job:
    steps:
    - script: |
        curl https://cdn.azul.com/zulu/bin/zulu14.27.1-ca-jdk14-linux_x64.tar.gz --output $(Agent.TempDirectory)/jdk-latest-linux_x64.tar.gz
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: "14"
        jdkArchitectureOption: x64
        jdkSourceOption: LocalDirectory
        jdkFile: $(Agent.TempDirectory)/jdk-latest-linux_x64.tar.gz
        jdkDestinationDirectory: $(Agent.ToolsDirectory)/binaries/openjdk
        cleanDestinationDirectory: true
    - task: Gradle@3
      inputs:
        gradleWrapperFile: 'gradlew'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.14'
        jdkArchitectureOption: 'x64'
        tasks: 'test'
    - script: echo "build.id=$(Build.BuildNumber)_$(Build.BuildId)" > src/main/resources/build.properties
      displayName: 'Overwrite build.properties'
    - script: |
        ./build.sh
      displayName: 'Build project artifacts'
    - task: Docker@2
      displayName: 'Build and push an image to container registry'
      inputs:
        command: buildAndPush
        repository: mds-ita-dataloader
        dockerfile: '$(Build.SourcesDirectory)/docker/Dockerfile'
        containerRegistry: $(MDS_DOCKER_CONTAINER_REGISTRY_SC_DEV)
    - task: CopyFiles@2
      inputs:
        Contents: 'kube-config-*.yml'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Copy Kube Config Files'
    - task: PublishBuildArtifacts@1
      inputs:
        PathToPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'manifest'
        publishLocation: 'Container'
      displayName: 'Publish Kube Config'
    - task: DockerCompose@1
      inputs:
        projectName: gh-ita-dataloader
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'ITADEV2-MSDataServicesAzure'
        azureContainerRegistry: '{"loginServer":"itadevacr.azurecr.io", "id" : "/subscriptions/675d7977-79af-4b94-b0bd-26d4095a4ffb/resourceGroups/ITA-MSDataServices-Dev-East1/providers/Microsoft.ContainerRegistry/registries/itadevacr"}'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Build services'
        additionalImageTags: '$(Build.BuildId)'
      displayName: 'Build Docker image for AKS'
    - task: DockerCompose@1
      inputs:
        projectName: gh-ita-dataloader
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'ITADEV2-MSDataServicesAzure'
        azureContainerRegistry: '{"loginServer":"itadevacr.azurecr.io", "id" : "/subscriptions/675d7977-79af-4b94-b0bd-26d4095a4ffb/resourceGroups/ITA-MSDataServices-Dev-East1/providers/Microsoft.ContainerRegistry/registries/itadevacr"}'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Push services'
        additionalImageTags: '$(Build.BuildId)'
      displayName: 'Push Docker image for AKS'
- stage: DeployDev
  displayName: Deploy to App Service in dev
  jobs:
  - job: Deploy
    displayName: Deploy
    steps:
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: $(MDS_AZURE_RM_SC_DEV)
        appType: 'webAppContainer'
        ResourceGroupName: $(MDS_AZURE_RG_DEV)
        deployToSlotOrASE: true
        slotName: staging
        WebAppName: $(MDS_AZURE_APP_DEV)
        DockerNamespace: $(MDS_AZURE_ACR_DEV)
        DockerRepository: 'mds-ita-dataloader'
        DockerImageTag: $(Build.BuildId)
#    - task: AzureAppServiceManage@0
#      inputs:
#        azureSubscription: $(MDS_AZURE_RM_SC_DEV)
#        appType: 'webAppContainer'
#        ResourceGroupName: $(MDS_AZURE_RG_DEV)
#        WebAppName: $(MDS_AZURE_APP_DEV)
#        SourceSlot: staging
#        SwapWithProduction: true
